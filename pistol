#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

WiFiUDP Udp;
WiFiClient client;

const char *ssid = "Pistoleto";
const char *pass = "axelvoxhd271";
bool connected   = false;
char buffer[128];
char ReplyBuffer[128];
IPAddress remoteIP;
int remotePort = 0;
int buttonState = 0;

unsigned int localUdpPort = 7777;
char incomingPacket[256];

void setup() {
  int i;
  
  Serial.begin(9600);
  delay(10);

  pinMode(5, INPUT);
  
  WiFi.begin(ssid, pass);
  
  for (i = 0; i < 10; i++)
  {
    if ( WiFi.status() == WL_CONNECTED )
    {
      connected = true;
      break;
    }

    delay(1000);
  }
  
  if ( connected == true )
  {
    Udp.begin(localUdpPort);
    sprintf(buffer, "Now listening at IP %s, UDP port %d\n", WiFi.localIP().toString().c_str(), localUdpPort);
  }
  else
  {
    Serial.println("Cant find Wi-Fi");
  }
}

void loop() {
  int packetSize = Udp.parsePacket();
  
  if (packetSize)
  {
    // receive incoming UDP packets
    Serial.printf("Received %d bytes from %s, port %d\n", packetSize, Udp.remoteIP().toString().c_str(), Udp.remotePort());
    int len = Udp.read(incomingPacket, 255);
    if (len > 0)
    {
      incomingPacket[len] = 0;
      Serial.printf("UDP packet contents: %s\n", incomingPacket);

      if ( strcmp(incomingPacket, "HELLO") == 0 )
      {
          remoteIP   = Udp.remoteIP();
          remotePort = Udp.remotePort();

          // clear string
          memset(ReplyBuffer, 0, sizeof(ReplyBuffer));
          strcpy(ReplyBuffer, "READY");

          Udp.beginPacket(remoteIP, remotePort);
          Udp.write(ReplyBuffer);
          Udp.endPacket();
      }
    }
  }

  buttonState = digitalRead(5);

  if ( buttonState == HIGH )
  {
    if ( remotePort != 0 )
    {
        // clear string
        memset(ReplyBuffer, 0, sizeof(ReplyBuffer));
        strcpy(ReplyBuffer, "SHOOT PLAYER_2");
        
        Udp.beginPacket(remoteIP, remotePort);
        Udp.write(ReplyBuffer);
        Udp.endPacket();

        delay(700);
    }
  }
}
